openapi: 3.0.0
info:
  title: Library System API
  version: 1.0.0
  description: REST API for managing books and authors in a library system.
  contact:
    name: Artem Pidgornyi
    email: rabotnikovv@gmail.com
servers:
  - url: https://api.example.com/v1
    description: Production server

paths:
  /books:
    get:
      summary: Get list of books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book created

  /books/{bookId}:
    get:
      summary: Get a book by ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      summary: Update a book
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated
    delete:
      summary: Delete a book
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted

  /authors:
    get:
      summary: Get list of authors
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Create a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '201':
          description: Author created

  /authors/{authorId}:
    get:
      summary: Get an author by ID
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    put:
      summary: Update an author
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '200':
          description: Author updated
    delete:
      summary: Delete an author
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Author deleted

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        authorId:
          type: integer
        publishedYear:
          type: integer
    BookInput:
      type: object
      required:
        - title
        - authorId
      properties:
        title:
          type: string
        authorId:
          type: integer
        publishedYear:
          type: integer
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        birthYear:
          type: integer
    AuthorInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        birthYear:
          type: integer